#!/usr/bin/env python3
"""
ü§ñ TRADING BOT PROFESIONAL - FASE 1.6 MULTI-PAR + AUTO PAIR SELECTOR
Bot de trading optimizado con sistema de m√©tricas avanzado, gesti√≥n de riesgo mejorada
y selecci√≥n autom√°tica de mejores pares en tendencia
"""

import os
import time
import logging
import signal
import random
import argparse
import sys
from datetime import datetime
from typing import Dict, List, Any, Optional
from decimal import getcontext
import requests

# Importar configuraci√≥n FASE 1.6
try:
    from config_fase_1_6 import config
except ImportError:
    # Fallback si no existe el archivo de configuraci√≥n
    class MockConfig:
        def __init__(self):
            self.FEE_TAKER_BPS = 7.5
            self.FEE_MAKER_BPS = 2.0
            self.SLIPPAGE_BPS = 1.5
            self.TP_BUFFER_BPS = 2.0
            self.TP_MODE = 'fixed_min'
            self.TP_MIN_BPS = 18.5
            self.ATR_PERIOD = 14
            self.TP_ATR_MULT = 0.50
            self.SL_ATR_MULT = 0.40
            self.MIN_RANGE_BPS = 5.0
            self.MAX_SPREAD_BPS = 2.0
            self.MIN_VOL_USD = 5000000
            self.MAX_WS_LATENCY_MS = 1500
            self.MAX_REST_LATENCY_MS = 800
            self.RETRY_ORDER = 2
            # Auto Pair Selector
            self.AUTO_PAIR_SELECTOR = False
            self.PAIRS_CANDIDATES = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT']
            self.MAX_ACTIVE_PAIRS = 4
            self.REBALANCE_MINUTES = 60
    config = MockConfig()

# Importar Auto Pair Selector
try:
    from pair_selector import AutoPairSelector, init_pair_selector, get_pair_selector
    AUTO_PAIR_SELECTOR_AVAILABLE = True
except ImportError:
    AUTO_PAIR_SELECTOR_AVAILABLE = False
    print("‚ö†Ô∏è Auto Pair Selector no disponible, usando configuraci√≥n por defecto")

# Configurar precisi√≥n decimal
getcontext().prec = 8

# Configurar logging profesional
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Variable global para control de apagado (mutable)
shutdown_state = {"stop": False}

def handle_shutdown_signal(signum, frame):
    """Manejar se√±ales de apagado de manera limpia"""
    signal_name = "SIGTERM" if signum == signal.SIGTERM else "SIGINT"
    logging.info(f"üõë {signal_name} recibido ‚Üí Iniciando apagado limpio...")
    shutdown_state["stop"] = True

# Configurar se√±ales
signal.signal(signal.SIGTERM, handle_shutdown_signal)
signal.signal(signal.SIGINT, handle_shutdown_signal)

def sleep_responsive(seconds: int):
    """Dormir en bloques de 1s, saliendo en <1s si llega se√±al de apagado"""
    remaining = int(seconds)
    while remaining > 0 and not shutdown_state["stop"]:
        time.sleep(1)
        remaining -= 1

class SafetyManager:
    """Sistema de gesti√≥n de seguridad y protecciones FASE 1.6"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.daily_loss = 0.0
        self.intraday_drawdown = 0.0
        self.consecutive_losses = 0
        self.last_trade_time = None
        self.hourly_trades = 0
        self.daily_trades = 0
        self.session_start_time = datetime.now()
        self.session_start_capital = 50.0
        
        # Cooldown racha
        self.racha_cooldown_start = None
        self.racha_cooldown_duration = 180  # 3 minutos (reducido de 5)
        self.probation_mode = False
        self.probation_trades = 0
        self.max_probation_trades = 1
        
        # === FASE 1.6: L√çMITES DE SEGURIDAD ACTUALIZADOS ===
        self.daily_loss_limit = float(os.getenv('DAILY_MAX_DRAWDOWN_PCT', '0.50')) / 100  # 0.5%
        self.intraday_drawdown_limit = 0.10  # 10%
        self.max_consecutive_losses = int(os.getenv('MAX_CONSECUTIVE_LOSSES', '2'))
        self.min_cooldown_seconds = int(os.getenv('COOLDOWN_AFTER_LOSS_MIN', '2')) * 60  # 2 minutos (reducido de 5)
        self.max_trades_per_hour = 20
        self.max_trades_per_day = int(os.getenv('MAX_TRADES_PER_DAY', '8'))
        
        # === FASE 1.6: CONFIGURACI√ìN CENTRALIZADA ===
        self.fee_taker_bps = config.FEE_TAKER_BPS
        self.fee_maker_bps = config.FEE_MAKER_BPS
        self.slippage_bps = config.SLIPPAGE_BPS
        self.tp_buffer_bps = config.TP_BUFFER_BPS
        
        # === FASE 1.6: OBJETIVOS DE SALIDA ===
        self.tp_mode = config.TP_MODE
        self.tp_min_bps = config.TP_MIN_BPS
        self.atr_period = config.ATR_PERIOD
        self.tp_atr_mult = config.TP_ATR_MULT
        self.sl_atr_mult = config.SL_ATR_MULT
        
        # === FASE 1.6: FILTROS DE ENTRADA ===
        self.min_range_bps = config.MIN_RANGE_BPS
        self.max_spread_bps = config.MAX_SPREAD_BPS
        self.min_vol_usd = config.MIN_VOL_USD
        
        # === FASE 1.6: LATENCIA/ESTABILIDAD ===
        self.max_ws_latency_ms = config.MAX_WS_LATENCY_MS
        self.max_rest_latency_ms = config.MAX_REST_LATENCY_MS
        self.retry_order = config.RETRY_ORDER
        
    def compute_trade_targets(self, price: float, atr_value: float = None) -> Dict[str, float]:
        """FASE 1.6: Calcular TP y SL din√°micos con fricci√≥n"""
        
        # Calcular fricci√≥n total
        fee_bps = max(self.fee_taker_bps, self.fee_maker_bps)
        fric_bps = 2 * fee_bps + self.slippage_bps  # entrada + salida + slippage
        tp_floor = fric_bps + self.tp_buffer_bps
        
        if self.tp_mode == "fixed_min":
            # Modo TP fijo m√≠nimo
            tp_bps = max(self.tp_min_bps, tp_floor)
            sl_bps = tp_bps / 1.25  # RR ‚âà 1.25:1
        else:
            # Modo ATR din√°mico
            if atr_value is None:
                atr_value = price * 0.01  # 1% por defecto
            
            atr_pct = (atr_value / price) * 100 * 100  # convertir a bps
            tp_bps = max(self.tp_atr_mult * atr_pct, tp_floor)
            sl_bps = max(self.sl_atr_mult * atr_pct, tp_floor / 1.25)
        
        return {
            'tp_bps': tp_bps,
            'sl_bps': sl_bps,
            'tp_floor': tp_floor,
            'fric_bps': fric_bps,
            'rr_ratio': tp_bps / sl_bps if sl_bps > 0 else 0,
            'tp_pct': tp_bps / 10000,  # convertir a porcentaje
            'sl_pct': sl_bps / 10000   # convertir a porcentaje
        }
    
    def pre_trade_filters(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """FASE 1.6: Aplicar filtros previos al trade"""
        
        filter_result = {
            'passed': True,
            'reason': 'OK',
            'details': {},
            'warnings': []
        }
        
        # Extraer datos del mercado
        current_price = market_data.get('price', 0.0)
        high = market_data.get('high', current_price)
        low = market_data.get('low', current_price)
        close = market_data.get('close', current_price)
        best_ask = market_data.get('best_ask', current_price)
        best_bid = market_data.get('best_bid', current_price)
        volume_usd = market_data.get('volume_usd', 0.0)
        ws_latency_ms = market_data.get('ws_latency_ms', 0.0)
        rest_latency_ms = market_data.get('rest_latency_ms', 0.0)
        
        # 1. Filtro de rango de vela
        if close > 0:
            range_pct = ((high - low) / close) * 100
            range_bps = range_pct * 100  # convertir a bps
            
            filter_result['details']['range_pct'] = range_pct
            filter_result['details']['range_bps'] = range_bps
            
            if range_bps < self.min_range_bps:
                filter_result['passed'] = False
                filter_result['reason'] = 'LOW_RANGE'
                filter_result['details']['min_range_bps'] = self.min_range_bps
                self.logger.info(f"‚ùå Trade rechazado: Rango bajo {range_bps:.1f} bps < {self.min_range_bps} bps")
                return filter_result
        else:
            filter_result['passed'] = False
            filter_result['reason'] = 'INVALID_PRICE'
            return filter_result
        
        # 2. Filtro de spread
        if best_ask > 0 and best_bid > 0:
            mid_price = (best_ask + best_bid) / 2
            spread_pct = ((best_ask - best_bid) / mid_price) * 100
            spread_bps = spread_pct * 100  # convertir a bps
            
            filter_result['details']['spread_pct'] = spread_pct
            filter_result['details']['spread_bps'] = spread_bps
            
            if spread_bps > self.max_spread_bps:
                filter_result['passed'] = False
                filter_result['reason'] = 'HIGH_SPREAD'
                filter_result['details']['max_spread_bps'] = self.max_spread_bps
                self.logger.info(f"‚ùå Trade rechazado: Spread alto {spread_bps:.1f} bps > {self.max_spread_bps} bps")
                return filter_result
        else:
            filter_result['warnings'].append("Spread no disponible")
        
        # 3. Filtro de volumen
        filter_result['details']['volume_usd'] = volume_usd
        
        if volume_usd < self.min_vol_usd:
            filter_result['passed'] = False
            filter_result['reason'] = 'LOW_VOLUME'
            filter_result['details']['min_vol_usd'] = self.min_vol_usd
            self.logger.info(f"‚ùå Trade rechazado: Volumen bajo ${volume_usd:,.0f} < ${self.min_vol_usd:,.0f}")
            return filter_result
        
        # 4. Filtro de latencia WebSocket
        filter_result['details']['ws_latency_ms'] = ws_latency_ms
        
        if ws_latency_ms > self.max_ws_latency_ms:
            filter_result['passed'] = False
            filter_result['reason'] = 'HIGH_WS_LAT'
            filter_result['details']['max_ws_latency_ms'] = self.max_ws_latency_ms
            self.logger.info(f"‚ùå Trade rechazado: Latencia WS alta {ws_latency_ms:.1f}ms > {self.max_ws_latency_ms}ms")
            return filter_result
        
        # 5. Filtro de latencia REST
        filter_result['details']['rest_latency_ms'] = rest_latency_ms
        
        if rest_latency_ms > self.max_rest_latency_ms:
            filter_result['passed'] = False
            filter_result['reason'] = 'HIGH_REST_LAT'
            filter_result['details']['max_rest_latency_ms'] = self.max_rest_latency_ms
            self.logger.info(f"‚ùå Trade rechazado: Latencia REST alta {rest_latency_ms:.1f}ms > {self.max_rest_latency_ms}ms")
            return filter_result
        
        # Si pasa todos los filtros
        if filter_result['passed']:
            self.logger.info(f"‚úÖ Filtros pasados: Rango={range_bps:.1f}bps, Spread={spread_bps:.1f}bps, Vol=${volume_usd:,.0f}")
        
        return filter_result
    
    def calculate_fees_and_slippage(self, trade_data: Dict[str, Any]) -> Dict[str, float]:
        """FASE 1.6: Calcular fees y slippage realistas"""
        
        notional = trade_data.get('notional', 0.0)
        intended_price = trade_data.get('intended_price', 0.0)
        executed_price = trade_data.get('executed_price', 0.0)
        
        # Calcular fees (entrada + salida) usando configuraci√≥n FASE 1.6
        fee_rate = config.FEE_TAKER_BPS / 10000  # convertir bps a decimal
        entry_fee = notional * fee_rate
        exit_fee = notional * fee_rate  # estimado para salida
        total_fees = entry_fee + exit_fee
        
        # Calcular slippage usando configuraci√≥n FASE 1.6
        if intended_price > 0 and executed_price > 0:
            slippage_pct = abs(executed_price - intended_price) / intended_price
            slippage_cost = notional * slippage_pct
        else:
            # Usar slippage estimado de configuraci√≥n
            slippage_pct = config.SLIPPAGE_BPS / 10000
            slippage_cost = notional * slippage_pct
        
        # Convertir a bps para logging
        fees_bps = (total_fees / notional) * 10000 if notional > 0 else 0
        slippage_bps = slippage_pct * 10000
        
        return {
            'entry_fee': entry_fee,
            'exit_fee': exit_fee,
            'total_fees': total_fees,
            'fees_bps': fees_bps,
            'slippage_cost': slippage_cost,
            'slippage_bps': slippage_bps,
            'slippage_pct': slippage_pct,
            'total_friction': total_fees + slippage_cost
        }
    
    def calculate_net_pnl(self, trade_data: Dict[str, Any]) -> Dict[str, float]:
        """FASE 1.6: Calcular P&L neto incluyendo fees y slippage"""
        
        # P&L bruto
        gross_pnl = trade_data.get('realized_pnl', 0.0)
        
        # Calcular fees y slippage
        friction_data = self.calculate_fees_and_slippage(trade_data)
        
        # P&L neto
        net_pnl = gross_pnl - friction_data['total_friction']
        
        return {
            'gross_pnl': gross_pnl,
            'net_pnl': net_pnl,
            'fees_cost': friction_data['total_fees'],
            'slippage_cost': friction_data['slippage_cost'],
            'total_friction': friction_data['total_friction'],
            'friction_impact': (friction_data['total_friction'] / abs(gross_pnl) * 100) if gross_pnl != 0 else 0
        }
    
    def check_safety_conditions(self, current_capital: float) -> Dict[str, Any]:
        """Verificar todas las condiciones de seguridad"""
        try:
            # Calcular m√©tricas de seguridad
            self.intraday_drawdown = ((self.session_start_capital - current_capital) / self.session_start_capital) * 100
            self.daily_loss = ((50.0 - current_capital) / 50.0) * 100
            
            # Verificar cooldown racha
            self.check_racha_cooldown()
            
            # Verificar l√≠mites
            safety_status = {
                'can_trade': True,
                'reason': None,
                'daily_loss': self.daily_loss,
                'intraday_drawdown': self.intraday_drawdown,
                'consecutive_losses': self.consecutive_losses,
                'probation_mode': self.probation_mode,
                'racha_cooldown_active': self.racha_cooldown_start is not None,
                'hourly_trades': self.hourly_trades
            }
            
            # Kill switches FASE 1.6
            if self.daily_loss >= (self.daily_loss_limit * 100):
                safety_status['can_trade'] = False
                safety_status['reason'] = f"P√©rdida diaria cr√≠tica: {self.daily_loss:.2f}%"
                
            elif self.intraday_drawdown >= 10.0:
                safety_status['can_trade'] = False
                safety_status['reason'] = f"Drawdown intrad√≠a cr√≠tico: {self.intraday_drawdown:.2f}%"
                
            elif self.consecutive_losses >= 3 and not self.probation_mode:
                safety_status['can_trade'] = False
                safety_status['reason'] = f"Racha de p√©rdidas: {self.consecutive_losses} consecutivas"
            
            # Cooldown racha
            elif self.racha_cooldown_start and (datetime.now() - self.racha_cooldown_start).total_seconds() < self.racha_cooldown_duration:
                safety_status['can_trade'] = False
                remaining_time = self.racha_cooldown_duration - (datetime.now() - self.racha_cooldown_start).total_seconds()
                safety_status['reason'] = f"Cooldown racha activo: {remaining_time/60:.1f}min restantes"
            
            # Rate limiting
            if self.last_trade_time:
                time_since_last = (datetime.now() - self.last_trade_time).total_seconds()
                if time_since_last < self.min_cooldown_seconds:
                    safety_status['can_trade'] = False
                    safety_status['reason'] = f"Cooldown activo: {self.min_cooldown_seconds - time_since_last:.0f}s restantes"
            
            if self.hourly_trades >= self.max_trades_per_hour:
                safety_status['can_trade'] = False
                safety_status['reason'] = f"L√≠mite horario alcanzado: {self.hourly_trades}/{self.max_trades_per_hour}"
                
            if self.daily_trades >= self.max_trades_per_day:
                safety_status['can_trade'] = False
                safety_status['reason'] = f"L√≠mite diario alcanzado: {self.daily_trades}/{self.max_trades_per_day}"
            
            return safety_status
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en verificaci√≥n de seguridad: {e}")
            return {'can_trade': False, 'reason': f"Error de seguridad: {e}"}
    
    def check_racha_cooldown(self):
        """Verificar y gestionar cooldown de racha"""
        try:
            # Si hay cooldown activo y ha pasado el tiempo
            if self.racha_cooldown_start and (datetime.now() - self.racha_cooldown_start).total_seconds() >= self.racha_cooldown_duration:
                self.racha_cooldown_start = None
                self.probation_mode = True
                self.probation_trades = 0
                self.logger.info("üîÑ Cooldown racha completado - Modo probation activado")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error verificando cooldown racha: {e}")
    
    def record_trade(self, result: str, pnl: float) -> None:
        """Registrar resultado de trade para m√©tricas de seguridad"""
        try:
            self.last_trade_time = datetime.now()
            self.hourly_trades += 1
            self.daily_trades += 1
            
            # Actualizar racha de p√©rdidas
            if result == 'P√âRDIDA':
                self.consecutive_losses += 1
                
                # Activar cooldown si alcanza l√≠mite
                if self.consecutive_losses >= self.max_consecutive_losses:
                    self.racha_cooldown_start = datetime.now()
                    self.logger.info(f"üö® Racha de p√©rdidas cr√≠tica ({self.consecutive_losses}) - Cooldown 30min activado")
            else:
                self.consecutive_losses = 0
                
                # Si est√° en probation y gana, salir del modo
                if self.probation_mode:
                    self.probation_mode = False
                    self.probation_trades = 0
                    self.logger.info("‚úÖ Probation exitoso - Modo normal restaurado")
            
            # Actualizar probation trades
            if self.probation_mode:
                self.probation_trades += 1
                if self.probation_trades >= self.max_probation_trades:
                    self.probation_mode = False
                    self.probation_trades = 0
                    self.logger.info("‚úÖ Probation completado - Modo normal restaurado")
                
            self.logger.info(f"üìä Seguridad: DD={self.intraday_drawdown:.2f}%, DL={self.daily_loss:.2f}%, CL={self.consecutive_losses}, Probation={self.probation_mode}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error registrando trade: {e}")
    
    def reset_hourly_counters(self):
        """Resetear contadores horarios"""
        try:
            self.hourly_trades = 0
            self.logger.info("üîÑ Contadores horarios reseteados")
        except Exception as e:
            self.logger.error(f"‚ùå Error reseteando contadores: {e}")

class MarketFilter:
    """Sistema de filtros de mercado"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # Par√°metros de filtros
        self.atr_period = 14
        self.atr_timeframe = "1m"
        self.atr_percentile_min = 40
        self.atr_percentile_max = 50
        self.ema_period = 50
        self.ema_timeframe = "1m"
        self.spread_max = 0.03  # 0.03% base
        self.slippage_max = 0.02  # 0.02%
        
        # Configuraci√≥n adaptativa
        self.spread_adaptive_on = True
        self.spread_adaptive_threshold = 0.05  # Subir a 0.04-0.05% si necesario
        self.spread_epsilon = 0.00001
        self.maker_only_enabled = True
        
    def check_market_conditions(self, price: float, volume: float) -> Dict[str, Any]:
        """Verificar condiciones de mercado para operar"""
        try:
            # Simular indicadores t√©cnicos
            atr_value = self.simulate_atr(price)
            ema_value = self.simulate_ema(price)
            spread_value = self.simulate_spread(price)
            
            # Spread adaptativo
            current_spread_max = self.spread_max
            if self.spread_adaptive_on and spread_value > self.spread_max:
                # Permitir spread m√°s alto si es necesario
                current_spread_max = min(spread_value * 1.2, self.spread_adaptive_threshold)
                self.logger.info(f"üìä Spread adaptativo: {spread_value:.3f}% ‚Üí permitido hasta {current_spread_max:.3f}%")
            
            filter_status = {
                'can_trade': True,
                'reason': None,
                'reason_code': None,
                'atr': atr_value,
                'ema': ema_value,
                'spread': spread_value,
                'maker_only': self.maker_only_enabled,
                'spread_adaptive': self.spread_adaptive_on
            }
            
            # Filtro ATR (volatilidad m√≠nima) con umbral din√°mico y relajaci√≥n
            atr_min_dynamic = 0.033 + (0.017 * random.random())  # 0.033‚Äì0.050 (reducido de 0.32-0.40)
            
            # === FASE 1.6: ATR SUAVE ===
            ATR_RELAX_FACTOR = 0.95
            spread_bps = spread_value * 10000  # Convertir a bps
            max_spread_bps = 2.0  # Config.MAX_SPREAD_BPS
            
            # Aplicar ATR suave si condiciones son favorables (spread bajo)
            if spread_bps <= 0.6 * max_spread_bps:
                atr_min_effective = atr_min_dynamic * ATR_RELAX_FACTOR
                self.logger.info(f"üéØ ATR suave aplicado: {atr_min_dynamic:.3f} ‚Üí {atr_min_effective:.3f} (spread={spread_bps:.1f} bps)")
            else:
                atr_min_effective = atr_min_dynamic
            
            if atr_value < atr_min_effective:
                filter_status['can_trade'] = False
                filter_status['reason'] = f"Volatilidad insuficiente: ATR={atr_value:.3f} (<{atr_min_effective:.3f})"
                filter_status['reason_code'] = 'low_volatility'
                return filter_status
            
            # Filtro EMA50 (tendencia)
            if price > ema_value:
                filter_status['direction'] = 'BUY'
            else:
                filter_status['direction'] = 'SELL'
            
            # Filtro spread adaptativo con tolerancia epsilon
            if (spread_value - current_spread_max) > self.spread_epsilon:
                filter_status['can_trade'] = False
                filter_status['reason'] = f"Spread alto: {spread_value:.3f}% (m√°x: {current_spread_max:.3f}%)"
                filter_status['reason_code'] = 'spread_high'
            
            return filter_status
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en filtros de mercado: {e}")
            return {'can_trade': False, 'reason': f"Error de filtros: {e}"}
    
    def simulate_atr(self, price: float) -> float:
        """Simular valor ATR"""
        return random.uniform(0.033, 0.8)  # Rango realista: 0.033% - 0.8%
    
    def simulate_ema(self, price: float) -> float:
        """Simular valor EMA50"""
        return price * random.uniform(0.995, 1.005)
    
    def simulate_spread(self, price: float) -> float:
        """Simular spread"""
        return random.uniform(0.01, 0.05)

class PositionManager:
    """Gesti√≥n de posiciones con ATR din√°mico y trailing"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # Configuraci√≥n ATR din√°mico
        self.atr_multiplier_sl = 1.0
        self.atr_multiplier_tp = 1.3
        
        # Configuraci√≥n trailing
        self.trailing_activation = 0.25  # 0.25%
        self.trailing_step = 0.08  # 0.08%
        
        # Fees
        self.fee_rate = 0.001  # 0.1%
        self.fees_included = True
        
        # Configuraci√≥n de trading
        self.position_size_usd_min = 2.00  # M√≠nimo $2 USD
        self.enable_maker_only = True  # Solo √≥rdenes maker
        self.spread_adaptive_on = True  # Spread adaptativo
        self.enable_parallel_pairs = []  # Solo BNBUSDT
        
    def calculate_position_size(self, capital: float, atr_value: float) -> Dict[str, Any]:
        """Calcular tama√±o de posici√≥n basado en ATR"""
        try:
            # Tama√±o base (0.6% del capital)
            base_size = capital * 0.006
            
            # Ajustar por ATR
            atr_adjusted_size = base_size * (atr_value / 0.5)  # Normalizar ATR
            
            # L√≠mite m√°ximo (1.2% del capital)
            max_size = capital * 0.012
            
            # Tama√±o final
            final_size = min(atr_adjusted_size, max_size)
            
            # Verificar m√≠nimo USD
            if final_size < self.position_size_usd_min:
                final_size = self.position_size_usd_min
            
            # Calcular fees
            estimated_fees = final_size * self.fee_rate
            
            position_data = {
                'size': final_size,
                'fees': estimated_fees,
                'size_net': final_size - estimated_fees,
                'atr_value': atr_value,
                'base_size': base_size,
                'max_size': max_size,
                'maker_only': self.enable_maker_only,
                'spread_adaptive': self.spread_adaptive_on
            }
            
            self.logger.info(f"üí∞ Tama√±o posici√≥n: ${final_size:.2f} (ATR: {atr_value:.3f}, Maker: {self.enable_maker_only})")
            return position_data
            
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando tama√±o: {e}")
            return {'size': 0, 'fees': 0, 'size_net': 0}
    
    def calculate_sl_tp(self, entry_price: float, direction: str, atr_value: float) -> Dict[str, Any]:
        """Calcular SL y TP basados en ATR"""
        try:
            # SL y TP basados en ATR
            sl_distance = atr_value * self.atr_multiplier_sl
            tp_distance = atr_value * self.atr_multiplier_tp
            
            if direction == 'BUY':
                sl_price = entry_price - sl_distance
                tp_price = entry_price + tp_distance
            else:
                sl_price = entry_price + sl_distance
                tp_price = entry_price - tp_distance
            
            # Trailing stop
            trailing_activation_price = entry_price + (tp_distance * self.trailing_activation)
            trailing_step = tp_distance * self.trailing_step
            
            sl_tp_data = {
                'sl_price': sl_price,
                'tp_price': tp_price,
                'trailing_activation': trailing_activation_price,
                'trailing_step': trailing_step,
                'atr_value': atr_value
            }
            
            self.logger.info(f"üìä SL: ${sl_price:.2f}, TP: ${tp_price:.2f} (ATR: {atr_value:.3f})")
            return sl_tp_data
            
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando SL/TP: {e}")
            return {'sl_price': 0, 'tp_price': 0}

class MetricsTracker:
    """Sistema de monitoreo de m√©tricas clave con fees incluidos"""
    
    def __init__(self, max_operations: int = 50):
        self.logger = logging.getLogger(__name__)
        self.max_operations = max_operations
        self.operations_history: List[Dict] = []
        self.peak_capital = 50.0
        self.current_capital = 50.0
        self.fees_included = True
        
    def add_operation(self, operation: Dict[str, Any]) -> None:
        """A√±adir operaci√≥n al historial"""
        try:
            # A√±adir operaci√≥n
            self.operations_history.append(operation)
            
            # Mantener solo las √∫ltimas max_operations
            if len(self.operations_history) > self.max_operations:
                self.operations_history = self.operations_history[-self.max_operations:]
            
            # Actualizar capital (neto de fees)
            self.current_capital = operation.get('capital_net', self.current_capital)
            
            # Actualizar peak capital
            if self.current_capital > self.peak_capital:
                self.peak_capital = self.current_capital
                
            self.logger.info(f"‚úÖ Operaci√≥n a√±adida al historial. Total: {len(self.operations_history)}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error a√±adiendo operaci√≥n: {e}")
    
    def calculate_win_rate(self) -> float:
        """Calcular Win Rate de las √∫ltimas operaciones"""
        try:
            if not self.operations_history:
                return 0.0
            
            winning_operations = sum(1 for op in self.operations_history if op.get('result') == 'GANANCIA')
            total_operations = len(self.operations_history)
            
            win_rate = (winning_operations / total_operations) * 100
            self.logger.info(f"üìä Win Rate calculado: {win_rate:.2f}% ({winning_operations}/{total_operations})")
            return win_rate
            
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando Win Rate: {e}")
            return 0.0
    
    def calculate_profit_factor(self) -> float:
        """Calcular Profit Factor neto de fees"""
        try:
            if not self.operations_history:
                return 0.0
            
            # Usar P&L neto de fees con precisi√≥n completa
            total_gains = sum(op.get('pnl_net', 0) for op in self.operations_history if op.get('pnl_net', 0) > 0)
            total_losses = abs(sum(op.get('pnl_net', 0) for op in self.operations_history if op.get('pnl_net', 0) < 0))
            
            # Manejar casos especiales
            if total_losses == 0:
                if total_gains > 0:
                    # Solo ganancias - mostrar como N/A en lugar de infinito
                    profit_factor = 0.0  # Ser√° manejado por get_profit_factor_display
                else:
                    profit_factor = 0.0  # Sin operaciones
            elif total_gains == 0:
                profit_factor = 0.0  # Solo losses
            else:
                profit_factor = total_gains / total_losses
            
            # Log sin mostrar infinito
            if total_losses == 0 and total_gains > 0:
                self.logger.info(f"üìà Profit Factor (neto) calculado: N/A (Gains: ${total_gains:.4f}, Losses: $0.0000)")
            else:
                self.logger.info(f"üìà Profit Factor (neto) calculado: {profit_factor:.2f} (Gains: ${total_gains:.4f}, Losses: ${total_losses:.4f})")
            
            return profit_factor
            
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando Profit Factor: {e}")
            return 0.0
    
    def get_profit_factor_display(self) -> str:
        """Obtener PF para display con manejo de casos especiales"""
        try:
            pf = self.calculate_profit_factor()
            
            # Verificar si hay solo ganancias sin p√©rdidas
            total_gains = sum(op.get('pnl_net', 0) for op in self.operations_history if op.get('pnl_net', 0) > 0)
            total_losses = abs(sum(op.get('pnl_net', 0) for op in self.operations_history if op.get('pnl_net', 0) < 0))
            
            if total_losses == 0 and total_gains > 0:
                return "N/A"  # Solo ganancias
            elif pf == 0.0:
                return "N/A"  # Sin operaciones o solo p√©rdidas
            else:
                return f"{pf:.2f}"
                
        except Exception as e:
            self.logger.error(f"‚ùå Error obteniendo PF display: {e}")
            return "N/A"
    
    def calculate_drawdown(self) -> float:
        """Calcular Drawdown actual"""
        try:
            if self.peak_capital == 0:
                return 0.0
            
            drawdown = ((self.peak_capital - self.current_capital) / self.peak_capital) * 100
            self.logger.info(f"üìâ Drawdown calculado: {drawdown:.2f}% (Peak: ${self.peak_capital:.2f}, Current: ${self.current_capital:.2f})")
            return drawdown
            
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando Drawdown: {e}")
            return 0.0
    
    def get_metrics_summary(self) -> Dict[str, Any]:
        """Obtener resumen de m√©tricas"""
        try:
            win_rate = self.calculate_win_rate()
            profit_factor = self.calculate_profit_factor()
            drawdown = self.calculate_drawdown()
            
            metrics = {
                'win_rate': win_rate,
                'profit_factor': profit_factor,
                'drawdown': drawdown,
                'total_operations': len(self.operations_history),
                'current_capital': self.current_capital,
                'peak_capital': self.peak_capital
            }
            
            self.logger.info(f"üìä M√©tricas calculadas: WR={win_rate:.2f}%, PF={profit_factor:.2f}, DD={drawdown:.2f}%")
            return metrics
            
        except Exception as e:
            self.logger.error(f"‚ùå Error obteniendo m√©tricas: {e}")
            return {}

class GoogleSheetsLogger:
    """Logger profesional para Google Sheets con m√©tricas"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.sheets_enabled = False
        self.spreadsheet_name = "Trading Bot Log"
        self.worksheet_name = "Trading Log"
        
        try:
            import gspread
            from google.oauth2.service_account import Credentials
            import json
            
            # Configurar credenciales
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # Intentar desde archivo local primero
            if os.path.exists('credentials.json'):
                creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
                self.client = gspread.authorize(creds)
                self.sheets_enabled = True
                self.logger.info("‚úÖ Google Sheets configurado desde archivo local")
            # Intentar desde variable de entorno (Render)
            elif os.getenv('GOOGLE_SHEETS_CREDENTIALS'):
                try:
                    credentials_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
                    creds = Credentials.from_service_account_info(json.loads(credentials_json), scopes=scope)
                    self.client = gspread.authorize(creds)
                    self.sheets_enabled = True
                    self.logger.info("‚úÖ Google Sheets configurado desde variable de entorno")
                except Exception as e:
                    self.logger.error(f"‚ùå Error configurando desde variable de entorno: {e}")
                    self.sheets_enabled = False
            else:
                self.logger.warning("‚ö†Ô∏è credentials.json no encontrado y GOOGLE_SHEETS_CREDENTIALS no configurado")
                self.sheets_enabled = False
                
        except Exception as e:
            self.logger.error(f"‚ùå Error configurando Google Sheets: {e}")
            self.sheets_enabled = False
    
    def log_trade(self, trade_data: Dict[str, Any], metrics: Dict[str, Any] = None) -> bool:
        """Log trade a Google Sheets con m√©tricas"""
        try:
            if not self.sheets_enabled:
                return False
            
            # Obtener worksheet
            spreadsheet = self.client.open(self.spreadsheet_name)
            worksheet = spreadsheet.worksheet(self.worksheet_name)
            
            # Preparar datos del trade
            timestamp = trade_data.get('timestamp', datetime.now().isoformat())
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            date_part = dt.strftime('%Y-%m-%d')
            time_part = dt.strftime('%H:%M:%S')
            
            # Obtener m√©tricas si no se proporcionan
            if not metrics:
                metrics = {
                    'win_rate': 0.0,
                    'profit_factor': 0.0,
                    'drawdown': 0.0
                }
            
            # Crear fila de datos FASE 1.6 (Date, Time en columnas separadas)
            row_data = [
                date_part,                 # Fecha
                time_part,                 # Hora
                trade_data.get('symbol', 'BNBUSDT'),  # S√≠mbolo
                trade_data.get('direction', ''),      # Direcci√≥n
                f"${trade_data.get('entry_price', 0):,.2f}",  # Precio Entrada
                f"{trade_data.get('size', 0):.6f}",           # Cantidad
                f"${trade_data.get('notional', 0):.2f}",      # Monto
                trade_data.get('strategy', 'breakout'),        # Estrategia
                f"{trade_data.get('confidence', 0):.1%}",     # Confianza
                "‚úÖ" if trade_data.get('ai_validation', True) else "‚ùå",  # IA Validaci√≥n
                trade_data.get('result', ''),                  # Resultado
                f"${trade_data.get('net_pnl', 0):.4f}",       # P&L Neto
                f"${trade_data.get('capital', 0):.2f}",       # Balance
                f"{metrics.get('win_rate', 0):.2f}%",         # Win Rate (%)
                metrics.get('profit_factor_display', 'N/A'),   # Profit Factor
                f"{metrics.get('drawdown', 0):.2f}%",         # Drawdown (%)
                f"{trade_data.get('signal_score', 0):.2f}",   # Signal Score
                f"${trade_data.get('expected_price', 0):.4f}", # Expected Price
                f"${trade_data.get('fill_price', 0):.4f}",    # Fill Price
                f"{trade_data.get('tick_size', 0):.4f}",      # Tick Size
                f"{trade_data.get('slippage_pct', 0):.4f}%",  # Slippage (%)
                
                # === FASE 1.6: NUEVAS COLUMNAS ===
                f"{trade_data.get('tp_bps', 0):.1f}",         # TP (bps)
                f"{trade_data.get('sl_bps', 0):.1f}",         # SL (bps)
                f"{trade_data.get('range_bps', 0):.1f}",      # Range (bps)
                f"{trade_data.get('spread_bps', 0):.1f}",     # Spread (bps)
                f"{trade_data.get('fees_bps', 0):.1f}",       # Fee (bps)
                f"${trade_data.get('fees_cost', 0):.4f}",     # Est. Fee (USD)
                f"{trade_data.get('slippage_bps', 0):.1f}",   # Slippage (bps)
                f"${trade_data.get('gross_pnl', 0):.4f}",     # PnL Bruto (USD)
                f"${trade_data.get('net_pnl', 0):.4f}",       # PnL Neto (USD)
                f"{trade_data.get('rr_ratio', 0):.2f}",       # RR
                f"{trade_data.get('atr_pct', 0):.2f}%",      # ATR (%)
                
                trade_data.get('phase', 'FASE 1.6')           # Fase
            ]
            
            # A√±adir fila
            worksheet.append_row(row_data)
            self.logger.info("‚úÖ Trade FASE 1.6 registrado en Google Sheets con m√©tricas mejoradas")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error registrando trade FASE 1.6 en Sheets: {e}")
            return False
    
    def log_telemetry(self, telemetry_data: Dict[str, Any]) -> bool:
        """Log telemetr√≠a a Google Sheets"""
        try:
            if not self.sheets_enabled:
                return False
            
            # Obtener worksheet de telemetr√≠a
            spreadsheet = self.client.open(self.spreadsheet_name)
            
            # Crear worksheet de telemetr√≠a si no existe
            try:
                worksheet = spreadsheet.worksheet("Telemetr√≠a")
            except:
                worksheet = spreadsheet.add_worksheet(title="Telemetr√≠a", rows=1000, cols=20)
                # Crear headers
                headers = [
                    'Timestamp', 'Win Rate', 'Profit Factor', 'Drawdown', 
                    'Trades/Hour', 'Fees Ratio', 'Rejection Low Vol', 
                    'Rejection Trend Mismatch', 'Rejection Spread', 
                    'Rejection Safety', 'Rejection Cooldown', 'Total Signals',
                    'Probation Mode', 'Racha Cooldown'
                ]
                worksheet.append_row(headers)
            
            # Preparar datos de telemetr√≠a
            timestamp = telemetry_data.get('timestamp', datetime.now().isoformat())
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            date_str = dt.strftime('%Y-%m-%d %H:%M:%S')
            
            # Crear fila de telemetr√≠a
            row_data = [
                date_str,  # Timestamp
                f"{telemetry_data.get('win_rate', 0):.2f}%",  # Win Rate
                telemetry_data.get('profit_factor', 'N/A'),  # Profit Factor
                f"{telemetry_data.get('drawdown', 0):.2f}%",  # Drawdown
                telemetry_data.get('trades_per_hour', 0),  # Trades/Hour
                f"{telemetry_data.get('fees_ratio', 0):.2f}%",  # Fees Ratio
                f"{telemetry_data.get('rejection_low_vol', 0):.2f}%",  # Rejection Low Vol
                f"{telemetry_data.get('rejection_trend_mismatch', 0):.2f}%",  # Rejection Trend Mismatch
                f"{telemetry_data.get('rejection_spread', 0):.2f}%",  # Rejection Spread
                f"{telemetry_data.get('rejection_safety', 0):.2f}%",  # Rejection Safety
                f"{telemetry_data.get('rejection_cooldown', 0):.2f}%",  # Rejection Cooldown
                telemetry_data.get('total_signals', 0),  # Total Signals
                telemetry_data.get('probation_mode', False),  # Probation Mode
                telemetry_data.get('racha_cooldown', False)  # Racha Cooldown
            ]
            
            # A√±adir fila
            worksheet.append_row(row_data)
            self.logger.info("‚úÖ Telemetr√≠a registrada en Google Sheets")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error registrando telemetr√≠a FASE 1.6 en Sheets: {e}")
            return False

class LocalLogger:
    """Logger local para an√°lisis y respaldo"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.data_dir = "trading_data"
        self.setup_directory()
    
    def setup_directory(self):
        """Configurar directorio de datos"""
        try:
            if not os.path.exists(self.data_dir):
                os.makedirs(self.data_dir)
                self.logger.info(f"‚úÖ Directorio de datos creado: {self.data_dir}")
        except Exception as e:
            self.logger.error(f"‚ùå Error creando directorio: {e}")
    
    def log_operation(self, trade_data: Dict[str, Any]) -> bool:
        """Registrar operaci√≥n localmente"""
        try:
            import json
            from datetime import datetime
            
            date = datetime.now().strftime("%Y-%m-%d")
            file_path = os.path.join(self.data_dir, f"operations_{date}.json")
            
            # Cargar operaciones existentes o crear nuevo
            operations = []
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    operations = json.load(f)
            
            # Preparar datos
            timestamp = trade_data.get('timestamp', datetime.now().isoformat())
            date_part = timestamp.split('T')[0] if 'T' in timestamp else timestamp.split(' ')[0]
            time_part = timestamp.split('T')[1].split('.')[0] if 'T' in timestamp else timestamp.split(' ')[1]
            
            # Calcular monto
            amount = trade_data.get('amount', 0)
            price = trade_data.get('price', 0)
            monto = amount * price
            
            operation = {
                "timestamp": timestamp,
                "date": date_part,
                "time": time_part,
                "symbol": trade_data.get('symbol', ''),
                "side": trade_data.get('side', ''),
                "price": trade_data.get('price', 0),
                "amount": trade_data.get('amount', 0),
                "monto": monto,
                "strategy": "breakout",
                "confidence": "0.6%",
                "validation": "BOT PROFESIONAL",
                "result": trade_data.get('result', ''),
                "pnl": trade_data.get('pnl', 0),
                "capital": trade_data.get('capital', 0),
                "created_at": datetime.now().isoformat()
            }
            
            operations.append(operation)
            
            # Guardar archivo
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(operations, f, indent=2, ensure_ascii=False)
            
            self.logger.info("‚úÖ Operaci√≥n registrada localmente")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error registrando localmente: {e}")
            return False

class ProfessionalTradingBot:
    """Bot de trading profesional con sistema de m√©tricas y gesti√≥n de riesgo FASE 1.6 - MULTI-PAR + AUTO PAIR SELECTOR"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.running = True
        self.cycle_count = 0
        self.current_capital = 50.0
        
        # === FASE 1.6: MULTI-PAR CONFIGURACI√ìN ===
        self.symbols = config.SYMBOLS  # ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT']
        self.current_symbol_index = 0
        self.symbol_rotation_counter = 0
        
        # === FASE 1.6: AUTO PAIR SELECTOR ===
        self.auto_pair_selector = config.AUTO_PAIR_SELECTOR
        self.pair_selector = None
        self.active_pairs = []
        
        # Inicializar Auto Pair Selector UNA SOLA VEZ
        if self.auto_pair_selector:
            try:
                from pair_selector import PairSelector
                self.pair_selector = PairSelector()
                self.active_pairs = self.initialize_active_pairs()
                if self.active_pairs:
                    self.logger.info(f"üéØ Auto Pair Selector: ‚úÖ ACTIVO - Pares activos: {', '.join(self.active_pairs)}")
                else:
                    self.logger.warning("üéØ Auto Pair Selector: ‚ö†Ô∏è INACTIVO - Usando pares por defecto")
                    self.active_pairs = config.SYMBOLS[:config.MAX_ACTIVE_PAIRS]
            except Exception as e:
                self.logger.error(f"‚ùå Error inicializando Auto Pair Selector: {e}")
                self.active_pairs = config.SYMBOLS[:config.MAX_ACTIVE_PAIRS]
                self.auto_pair_selector = False
        else:
            self.active_pairs = config.SYMBOLS[:config.MAX_ACTIVE_PAIRS]
            self.logger.info(f"üéØ Auto Pair Selector: ‚ùå INACTIVO - Usando pares por defecto: {', '.join(self.active_pairs)}")
        
        # === FASE 1.6: RESUMEN DIARIO ===
        self.daily_summary_enabled = config.DAILY_SUMMARY_ENABLED
        self.daily_summary_time = config.DAILY_SUMMARY_TIME
        self.last_daily_summary = None
        self.daily_trades = []
        self.daily_pnl_net = 0.0
        
        # Inicializar sistemas
        self.metrics_tracker = MetricsTracker()
        self.safety_manager = SafetyManager()
        self.market_filter = MarketFilter()
        self.position_manager = PositionManager()
        self.sheets_logger = GoogleSheetsLogger()
        self.local_logger = LocalLogger()
        self.telemetry_manager = TelemetryManager(self)
        
        # Configuraci√≥n de trading
        self.update_interval = 180  # 3 minutos (configurable)
        self.session_start_time = datetime.now()
        
        self.logger.info("ü§ñ BOT:")
        self.logger.info("‚úÖ Sistema de m√©tricas inicializado")
        self.logger.info("‚úÖ Sistema de seguridad inicializado")
        self.logger.info("‚úÖ Filtros de mercado inicializados")
        self.logger.info("‚úÖ Gesti√≥n de posiciones inicializada")
        self.logger.info("‚úÖ Telemetr√≠a y alertas inicializadas")
        self.logger.info("‚úÖ Google Sheets configurado desde variable de entorno")
        self.logger.info("‚úÖ Google Sheets habilitado")
        self.logger.info("‚úÖ Directorio de datos creado: trading_data")
        self.logger.info("‚úÖ Logging local habilitado")
        
        self.logger.info("üöÄ Iniciando bot profesional - FASE 1.6 MULTI-PAR + AUTO PAIR SELECTOR...")
        
        # Mensaje de inicio FASE 1.6 MULTI-PAR + AUTO PAIR SELECTOR
        startup_message = f"""
ü§ñ **BOT PROFESIONAL - FASE 1.6 MULTI-PAR + AUTO PAIR SELECTOR**

üìÖ **Fecha**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîÑ **Modo**: {config.MODE}
üõ°Ô∏è **Shadow Mode**: {config.SHADOW_MODE}

üìä **Multi-Par Configuraci√≥n**:
üéØ **S√≠mbolos**: {', '.join(self.symbols)}
üìä **Actual**: {self.get_current_symbol()}
üîÑ **Rotaci√≥n**: Cada 4 ciclos

üéØ **Auto Pair Selector**:
{'‚úÖ ACTIVO' if self.auto_pair_selector else '‚ùå INACTIVO'}
üìä **Candidatos**: {len(config.PAIRS_CANDIDATES)} pares
üéØ **M√°ximo activos**: {config.MAX_ACTIVE_PAIRS}
üîÑ **Rebalance**: {config.REBALANCE_MINUTES} min
üìä **Pares activos**: {', '.join(self.active_pairs)}

üìà **Targets FASE 1.6**:
üéØ **TP M√≠nimo**: {config.TP_MIN_BPS} bps
üéØ **TP Buffer**: {config.TP_BUFFER_BPS} bps
üìä **RR Garantizado**: 1.25:1

üõ°Ô∏è **Seguridad**:
üìä **DD M√°ximo**: {config.DAILY_MAX_DRAWDOWN_PCT}%
üìä **Trades M√°x/D√≠a**: {config.MAX_TRADES_PER_DAY}
üìä **Cooldown**: {config.COOLDOWN_AFTER_LOSS_MIN}min

üìä **Filtros**:
üéØ **Rango M√≠n**: {config.MIN_RANGE_BPS} bps
üéØ **Spread M√°x**: {config.MAX_SPREAD_BPS} bps
üéØ **Vol M√≠n**: ${config.MIN_VOL_USD:,.0f}
üéØ **ATR M√≠n**: {config.ATR_MIN_PCT}%

---
üöÄ **¬°Bot listo para operar!**
"""
        self.send_telegram_message(startup_message)
        self.logger.info("‚úÖ Bot profesional - FASE 1.6 MULTI-PAR + AUTO PAIR SELECTOR iniciado correctamente")
    
    def initialize_active_pairs(self) -> List[str]:
        """Inicializar pares activos usando Auto Pair Selector o fallback"""
        try:
            if self.auto_pair_selector and self.pair_selector:
                active_pairs = self.pair_selector.select_active_pairs()
                
                if active_pairs:
                    return active_pairs
                else:
                    self.logger.warning("‚ö†Ô∏è Auto Pair Selector no devolvi√≥ pares, usando fallback")
            
            # Fallback a configuraci√≥n por defecto
            fallback_pairs = config.SYMBOLS[:config.MAX_ACTIVE_PAIRS]
            return fallback_pairs
            
        except Exception as e:
            self.logger.error(f"‚ùå Error inicializando pares activos: {e}")
            return config.SYMBOLS[:config.MAX_ACTIVE_PAIRS]
    
    def get_current_symbol(self) -> str:
        """Obtener s√≠mbolo actual del multi-par"""
        return self.symbols[self.current_symbol_index]
    
    def rotate_symbol(self) -> str:
        """Rotar al siguiente s√≠mbolo del multi-par"""
        self.current_symbol_index = (self.current_symbol_index + 1) % len(self.symbols)
        self.symbol_rotation_counter += 1
        new_symbol = self.get_current_symbol()
        self.logger.info(f"üîÑ Rotando s√≠mbolo: {new_symbol} (ciclo {self.symbol_rotation_counter})")
        return new_symbol
    
    def should_rotate_symbol(self) -> bool:
        """Verificar si debe rotar s√≠mbolo (cada 4 ciclos)"""
        return self.cycle_count > 0 and self.cycle_count % 4 == 0
    
    def should_rebalance_pairs(self) -> bool:
        """Verificar si debe rebalancear pares (Auto Pair Selector)"""
        if not self.auto_pair_selector or not self.pair_selector:
            return False
        
        try:
            return self.pair_selector.should_rebalance()
        except Exception as e:
            self.logger.error(f"‚ùå Error verificando rebalance: {e}")
            return False
    
    def rebalance_pairs(self) -> bool:
        """Rebalancear pares activos usando Auto Pair Selector"""
        try:
            if not self.auto_pair_selector or not self.pair_selector:
                return False
            
            self.logger.info("üîÑ Iniciando rebalance de pares...")
            new_active_pairs = self.pair_selector.select_active_pairs()
            
            if new_active_pairs and new_active_pairs != self.active_pairs:
                old_pairs = ', '.join(self.active_pairs)
                self.active_pairs = new_active_pairs
                new_pairs = ', '.join(self.active_pairs)
                
                self.logger.info(f"üîÑ Pares rebalanceados: {old_pairs} ‚Üí {new_pairs}")
                
                # Loggear resumen del universo
                if hasattr(self.pair_selector, 'log_universe_summary'):
                    self.pair_selector.log_universe_summary()
                
                return True
            else:
                self.logger.info("üìä No se requiri√≥ rebalance (pares sin cambios)")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Error rebalanceando pares: {e}")
            return False
    
    def send_telegram_message(self, message: str):
        """Enviar mensaje a Telegram"""
        try:
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_CHAT_ID')
            
            if bot_token and chat_id:
                url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                data = {
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'Markdown'
                }
                
                response = requests.post(url, data=data, timeout=10)
                if response.status_code == 200:
                    self.logger.info("‚úÖ Mensaje enviado a Telegram")
                else:
                    self.logger.warning(f"‚ö†Ô∏è Error enviando mensaje: {response.status_code}")
            else:
                self.logger.warning("‚ö†Ô∏è Credenciales Telegram no configuradas")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error enviando mensaje Telegram FASE 1.6: {e}")
    
    def send_daily_summary(self):
        """Enviar resumen diario por Telegram"""
        try:
            if not self.daily_summary_enabled:
                return
            
            # Calcular m√©tricas del d√≠a
            if not self.daily_trades:
                return
            
            total_trades = len(self.daily_trades)
            winning_trades = len([t for t in self.daily_trades if t.get('result') == 'GANANCIA'])
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            
            # Calcular Profit Factor
            gains = sum([t.get('net_pnl', 0) for t in self.daily_trades if t.get('net_pnl', 0) > 0])
            losses = abs(sum([t.get('net_pnl', 0) for t in self.daily_trades if t.get('net_pnl', 0) < 0]))
            profit_factor = gains / losses if losses > 0 else (gains if gains > 0 else 0)
            
            # Calcular Drawdown
            peak_capital = max([t.get('capital', 50.0) for t in self.daily_trades])
            current_capital = self.daily_trades[-1].get('capital', 50.0) if self.daily_trades else 50.0
            drawdown = ((peak_capital - current_capital) / peak_capital * 100) if peak_capital > 0 else 0
            
            # Calcular P&L neto del d√≠a
            daily_pnl_net = sum([t.get('net_pnl', 0) for t in self.daily_trades])
            
            # Crear mensaje de resumen
            summary_message = f"""
üìä **RESUMEN DIARIO - FASE 1.6 MULTI-PAR**

üìÖ **Fecha**: {datetime.now().strftime('%Y-%m-%d')}
üïê **Hora**: {datetime.now().strftime('%H:%M:%S')}

üí∞ **Capital**: ${current_capital:.2f}
üìà **P&L Neto D√≠a**: ${daily_pnl_net:.4f}

üìä **M√©tricas**:
üéØ **Trades**: {total_trades}
‚úÖ **Ganados**: {winning_trades}
üìä **Win Rate**: {win_rate:.1f}%
üìà **Profit Factor**: {profit_factor:.2f}
üìâ **Drawdown**: {drawdown:.2f}%

üîÑ **Multi-Par**:
üìä **S√≠mbolos**: {', '.join(self.symbols)}
üéØ **Actual**: {self.get_current_symbol()}
üîÑ **Rotaciones**: {self.symbol_rotation_counter}

üõ°Ô∏è **Seguridad**:
üìä **DD M√°ximo**: {config.DAILY_MAX_DRAWDOWN_PCT}%
üìä **Trades M√°x/D√≠a**: {config.MAX_TRADES_PER_DAY}
üìä **TP M√≠nimo**: {config.TP_MIN_BPS} bps

---
ü§ñ **Bot FASE 1.6 - MULTI-PAR**
            """
            
            self.send_telegram_message(summary_message)
            self.logger.info("‚úÖ Resumen diario enviado a Telegram")
            
            # Limpiar datos del d√≠a
            self.daily_trades = []
            self.daily_pnl_net = 0.0
            self.last_daily_summary = datetime.now()
            
        except Exception as e:
            self.logger.error(f"‚ùå Error enviando resumen diario: {e}")
    
    def check_daily_summary_time(self):
        """Verificar si es hora de enviar resumen diario"""
        try:
            if not self.daily_summary_enabled:
                return
            
            current_time = datetime.now()
            
            # Verificar si es la hora configurada (22:05)
            if (current_time.hour == 22 and current_time.minute == 5 and 
                (self.last_daily_summary is None or 
                 (current_time - self.last_daily_summary).days >= 1)):
                
                self.send_daily_summary()
                
        except Exception as e:
            self.logger.error(f"‚ùå Error verificando hora de resumen: {e}")
    
    def simulate_trading_signal(self) -> Dict[str, Any]:
        """Simular se√±al de trading con multi-par + Auto Pair Selector"""
        try:
            # Rotar s√≠mbolo si es necesario (multi-par tradicional)
            if self.should_rotate_symbol():
                self.rotate_symbol()
            
            # Usar pares activos del Auto Pair Selector si est√° habilitado
            if self.auto_pair_selector and self.pair_selector and self.active_pairs:
                # Seleccionar s√≠mbolo de los pares activos
                current_symbol = random.choice(self.active_pairs)
                self.logger.info(f"üéØ Auto Pair Selector: usando s√≠mbolo activo {current_symbol}")
            else:
                # Usar m√©todo tradicional de rotaci√≥n
                current_symbol = self.get_current_symbol()
            
            # Simular precio seg√∫n el s√≠mbolo (expandido para m√°s pares)
            price_ranges = {
                'BTCUSDT': (40000, 50000),
                'ETHUSDT': (2000, 3000),
                'BNBUSDT': (500, 650),
                'SOLUSDT': (80, 120),
                'XRPUSDT': (0.4, 0.6),
                'ADAUSDT': (0.3, 0.5),
                'DOGEUSDT': (0.06, 0.10),
                'LINKUSDT': (12, 18),
                'TONUSDT': (2.0, 3.0),
                'MATICUSDT': (0.6, 1.0),
                'ARBUSDT': (1.0, 1.5),
                'OPUSDT': (2.5, 3.5),
                'LTCUSDT': (65, 85),
                'APTUSDT': (6, 10),
                'TRXUSDT': (0.06, 0.10)
            }
            
            if current_symbol in price_ranges:
                min_price, max_price = price_ranges[current_symbol]
                current_price = random.uniform(min_price, max_price)
            else:
                current_price = random.uniform(500, 650)
            
            volume = random.uniform(1000, 5000)
            
            # Verificar condiciones de mercado
            market_conditions = self.market_filter.check_market_conditions(current_price, volume)
            
            if not market_conditions['can_trade']:
                # Registrar motivo de rechazo con c√≥digo
                self.telemetry_manager.record_rejection(market_conditions.get('reason_code', 'other'))
                return {
                    'signal': 'REJECTED',
                    'reason': market_conditions['reason'],
                    'price': current_price,
                    'volume': volume,
                    'market_data': market_conditions,
                    'symbol': current_symbol
                }
            
            # Generar se√±al basada en direcci√≥n del mercado
            direction = market_conditions['direction']
            
            # Simular confianza basada en condiciones
            confidence = random.uniform(0.6, 0.9)
            
            signal_data = {
                'signal': direction,
                'direction': direction,  # Para compatibilidad
                'price': current_price,
                'volume': volume,
                'confidence': confidence,
                'timestamp': datetime.now().isoformat(),
                'market_data': market_conditions,
                'symbol': current_symbol
            }
            
            friendly_reason = market_conditions.get('reason') or 'Condiciones favorables'
            self.logger.info(f"üìä Se√±al: {direction} {current_symbol} - {friendly_reason}")
            return signal_data
            
        except Exception as e:
            self.logger.error(f"‚ùå Error generando se√±al FASE 1.6 MULTI-PAR + AUTO PAIR SELECTOR: {e}")
            return None
    
    def simulate_trade(self, signal: Dict[str, Any]) -> Dict[str, Any]:
        """FASE 1.6: Simular ejecuci√≥n de trade con multi-par"""
        try:
            if signal['signal'] in ['REJECTED', 'ERROR']:
                # Registrar rechazo por seguridad
                if signal['signal'] == 'REJECTED':
                    self.telemetry_manager.record_rejection('safety_block')
                return {
                    'executed': False,
                    'reason': signal.get('reason', 'Se√±al rechazada'),
                    'signal': signal
                }
            
            # Verificar condiciones de seguridad
            safety_status = self.safety_manager.check_safety_conditions(self.current_capital)
            
            if not safety_status['can_trade']:
                # Registrar rechazo por cooldown
                if 'cooldown' in safety_status['reason'].lower():
                    self.telemetry_manager.record_rejection('cooldown')
                else:
                    self.telemetry_manager.record_rejection('safety_block')
                    
                return {
                    'executed': False,
                    'reason': safety_status['reason'],
                    'signal': signal,
                    'safety_status': safety_status
                }
            
            # === FASE 1.6: APLICAR FILTROS PRE-TRADE ===
            market_data = {
                'price': signal['price'],
                'high': signal['price'] * (1 + random.uniform(0.005, 0.02)),
                'low': signal['price'] * (1 - random.uniform(0.005, 0.02)),
                'close': signal['price'],
                'best_ask': signal['price'] * 1.0001,
                'best_bid': signal['price'] * 0.9999,
                'volume_usd': random.uniform(5000000, 15000000),
                'ws_latency_ms': random.uniform(50, 200),
                'rest_latency_ms': random.uniform(100, 500)
            }
            
            # Aplicar filtros
            filter_result = self.safety_manager.pre_trade_filters(market_data)
            if not filter_result['passed']:
                self.logger.info(f"‚ùå Trade rechazado por filtros: {filter_result['reason']}")
                # NO registrar trade rechazado - solo retornar
                return {
                    'executed': False,
                    'reason': f"Filtro fallido: {filter_result['reason']}",
                    'signal': signal,
                    'filter_result': filter_result
                }
            
            # Obtener datos de mercado
            entry_price = signal['price']
            direction = signal['signal']
            atr_value = signal['market_data']['atr']
            current_symbol = signal['symbol']
            
            # === FASE 1.6: CALCULAR TARGETS DIN√ÅMICOS ===
            targets = self.safety_manager.compute_trade_targets(entry_price, atr_value)
            
            # === FASE 1.6: FILTRO DE EDGE ===
            friccion_bps = targets['fric_bps']
            tp_bps = targets['tp_bps']
            edge_bps = tp_bps - friccion_bps
            
            # Configurar EDGE_MIN_BPS (3.0 bps m√≠nimo)
            EDGE_MIN_BPS = 3.0
            
            if edge_bps < EDGE_MIN_BPS:
                self.logger.info(f"‚ùå Trade rechazado: Edge insuficiente: {edge_bps:.1f} bps (TP={tp_bps:.1f}, Fricci√≥n={friccion_bps:.1f})")
                self.telemetry_manager.record_rejection('low_edge')
                return {
                    'executed': False,
                    'reason': f"Edge insuficiente: {edge_bps:.1f} bps < {EDGE_MIN_BPS} bps",
                    'signal': signal,
                    'edge_bps': edge_bps,
                    'tp_bps': tp_bps,
                    'friccion_bps': friccion_bps
                }
            
            self.logger.info(f"‚úÖ Edge: {edge_bps:.1f} bps (TP={tp_bps:.1f}, Fricci√≥n={friccion_bps:.1f})")
            
            # Calcular tama√±o de posici√≥n
            position_data = self.position_manager.calculate_position_size(self.current_capital, atr_value)
            
            # Aplicar reducci√≥n de tama√±o en modo probation (-50%)
            if safety_status.get('probation_mode', False):
                position_data['size'] = max(self.position_manager.position_size_usd_min, position_data['size'] * 0.5)
                position_data['fees'] = position_data['size'] * self.position_manager.fee_rate
            
            # === FASE 1.6: SIMULAR EJECUCI√ìN CON SLIPPAGE REALISTA ===
            slippage_bps = random.uniform(1.0, 3.0)  # 1-3 bps
            slippage_pct = slippage_bps / 10000
            if direction == 'BUY':
                executed_price = entry_price * (1 + slippage_pct)
            else:
                executed_price = entry_price * (1 - slippage_pct)
            
            # === FASE 1.6: SIMULAR RESULTADO BASADO EN TARGETS ===
            win_probability = 0.6  # 60% win rate
            is_win = random.random() < win_probability
            
            # Calcular P&L bruto basado en targets
            if is_win:
                # Ganancia basada en TP din√°mico
                tp_pct = targets['tp_pct']
                if direction == 'BUY':
                    exit_price = executed_price * (1 + tp_pct)
                else:
                    exit_price = executed_price * (1 - tp_pct)
                pnl_gross = position_data['size'] * (exit_price - executed_price) / executed_price
            else:
                # P√©rdida basada en SL din√°mico
                sl_pct = targets['sl_pct']
                if direction == 'BUY':
                    exit_price = executed_price * (1 - sl_pct)
                else:
                    exit_price = executed_price * (1 + sl_pct)
                pnl_gross = position_data['size'] * (exit_price - executed_price) / executed_price
            
            # === FASE 1.6: CALCULAR P&L NETO CON FEES/SLIPPAGE ===
            trade_data_for_pnl = {
                'notional': position_data['size'],
                'intended_price': entry_price,
                'executed_price': executed_price,
                'realized_pnl': pnl_gross
            }
            
            pnl_data = self.safety_manager.calculate_net_pnl(trade_data_for_pnl)
            pnl_net = pnl_data['net_pnl']
            
            # === FASE 1.6: DETERMINAR RESULTADO BASADO EN PnL NETO ===
            result = "GANANCIA" if pnl_net > 0 else "P√âRDIDA"
            
            # No forzar valores m√≠nimos - usar P&L neto real
            # El P&L neto ya incluye fees y slippage calculados correctamente
            
            # Actualizar capital
            new_capital = self.current_capital + pnl_net
            self.current_capital = new_capital
            
            # Registrar trade en sistema de seguridad
            self.safety_manager.record_trade(result, pnl_net)
            
            # === FASE 1.6: CREAR DATOS DEL TRADE MEJORADOS ===
            trade_data = {
                'timestamp': datetime.now().isoformat(),
                'symbol': current_symbol,
                'direction': direction,
                'entry_price': executed_price,
                'exit_price': exit_price,
                'size': position_data['size'],
                'notional': position_data['size'],
                'gross_pnl': pnl_gross,
                'net_pnl': pnl_net,
                'result': result,
                'capital': new_capital,
                'capital_net': new_capital,
                'atr_value': atr_value,
                'confidence': signal['confidence'],
                'strategy': 'breakout',
                'phase': 'FASE 1.6 MULTI-PAR',
                'safety_status': safety_status,
                
                # === FASE 1.6: NUEVAS M√âTRICAS ===
                'tp_bps': targets['tp_bps'],
                'sl_bps': targets['sl_bps'],
                'tp_pct': targets['tp_pct'],
                'sl_pct': targets['sl_pct'],
                'rr_ratio': targets['rr_ratio'],
                'fric_bps': targets['fric_bps'],
                'tp_floor': targets['tp_floor'],
                'fees_bps': pnl_data['fees_cost'] / position_data['size'] * 10000,
                'slippage_bps': slippage_bps,
                'range_bps': filter_result['details'].get('range_bps', 0),
                'spread_bps': filter_result['details'].get('spread_bps', 0),
                'atr_pct': (atr_value / entry_price) * 100,
                
                # Friction data
                'fees_cost': pnl_data['fees_cost'],
                'slippage_cost': pnl_data['slippage_cost'],
                'total_friction': pnl_data['total_friction'],
                'friction_impact': pnl_data['friction_impact'],
                
                # Market data
                'spread_at_execution': filter_result['details'].get('spread_pct', 0) * 100,
                'volume_at_execution': filter_result['details'].get('volume_usd', 0),
                'range_at_execution': filter_result['details'].get('range_pct', 0),
                
                # Legacy fields for compatibility
                'fees': pnl_data['fees_cost'],
                'pnl_gross': pnl_gross,
                'pnl_net': pnl_net,
                'sl_price': exit_price if not is_win else None,
                'tp_price': exit_price if is_win else None
            }
            
            # A√±adir a m√©tricas
            self.metrics_tracker.add_operation(trade_data)
            
            # A√±adir a trades del d√≠a para resumen
            self.daily_trades.append(trade_data)
            self.daily_pnl_net += pnl_net
            
            # Obtener m√©tricas actualizadas
            metrics = self.metrics_tracker.get_metrics_summary()
            
            # Logging
            self.logger.info(f"üìä Trade FASE 1.6 MULTI-PAR: {result} | TP={targets['tp_pct']:.4f}% | SL={targets['sl_pct']:.4f}% | RR={targets['rr_ratio']:.2f}")
            self.logger.info(f"üí∞ P&L: Bruto=${pnl_gross:.4f} | Neto=${pnl_net:.4f} | Friction=${pnl_data['total_friction']:.4f}")
            
            # Registrar en Google Sheets
            self.sheets_logger.log_trade(trade_data, metrics)
            
            # Registrar localmente
            self.local_logger.log_operation(trade_data)
            
            # Mensaje Telegram FASE 1.6 MULTI-PAR
            telegram_message = f"""
ü§ñ **BOT PROFESIONAL - FASE 1.6 MULTI-PAR**

üí∞ **Trade**: {direction} {current_symbol}
üíµ **Precio**: ${entry_price:,.2f}
üìä **Resultado**: {result}
üí∏ **P&L Neto**: ${pnl_net:.4f}

üìà **Targets FASE 1.6**:
üéØ **TP**: {trade_data.get('tp_pct', 0):.4f}% ({trade_data.get('tp_bps', 0):.1f} bps)
üéØ **SL**: {trade_data.get('sl_pct', 0):.4f}% ({trade_data.get('sl_bps', 0):.1f} bps)
üìä **RR**: {trade_data.get('rr_ratio', 0):.2f}:1

üìà **M√©tricas**:
üìä **Win Rate**: {metrics['win_rate']:.2f}%
üìà **Profit Factor**: {self.metrics_tracker.get_profit_factor_display()}
üìâ **Drawdown**: {metrics['drawdown']:.2f}%

üõ°Ô∏è **Seguridad**:
üìä **DD**: {safety_status['intraday_drawdown']:.2f}%
üìä **DL**: {safety_status['daily_loss']:.2f}%
üìä **CL**: {safety_status['consecutive_losses']}
üîí **Probation**: {safety_status.get('probation_mode', False)}

üîÑ **Multi-Par**:
üìä **S√≠mbolo**: {current_symbol}
üîÑ **Rotaci√≥n**: {self.symbol_rotation_counter}
"""
            self.send_telegram_message(telegram_message)
            
            return {
                'executed': True,
                'trade_data': trade_data,
                'metrics': metrics,
                'safety_status': safety_status,
                'targets': targets,
                'filter_result': filter_result
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Error ejecutando trade FASE 1.6 MULTI-PAR: {e}")
            return {'executed': False, 'reason': str(e)}
    
    def run_trading_cycle(self):
        """Ejecutar ciclo de trading FASE 1.6 MULTI-PAR + AUTO PAIR SELECTOR"""
        try:
            self.cycle_count += 1
            current_time = datetime.now()
            
            self.logger.info(f"üîÑ Iniciando ciclo {self.cycle_count}...")
            self.logger.info(f"üîÑ Ciclo {self.cycle_count} - {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Verificar resumen diario
            self.check_daily_summary_time()
            
            # === AUTO PAIR SELECTOR: REBALANCE ===
            if self.should_rebalance_pairs():
                self.logger.info("üîÑ Verificando rebalance de pares...")
                if self.rebalance_pairs():
                    self.logger.info("‚úÖ Rebalance completado")
                else:
                    self.logger.info("üìä No se requiri√≥ rebalance")
            
            # Rotar s√≠mbolo si es necesario
            if self.should_rotate_symbol():
                self.rotate_symbol()
            
            # Simular se√±al de trading
            signal = self.simulate_trading_signal()
            
            if not signal:
                self.logger.info("‚ùå No se gener√≥ se√±al de trading")
                return
            
            # Ejecutar trade
            trade_result = self.simulate_trade(signal)
            
            if trade_result['executed']:
                self.logger.info(f"‚úÖ Trade ejecutado: {signal['direction']} @ ${signal['price']:.2f}")
                
                # Actualizar m√©tricas
                if 'metrics' in trade_result:
                    metrics = trade_result['metrics']
                    self.logger.info(f"üìä M√©tricas: WR={metrics['win_rate']:.2f}%, PF={self.metrics_tracker.get_profit_factor_display()}, DD={metrics['drawdown']:.2f}%")
                
                # Enviar telemetr√≠a
                if 'safety_status' in trade_result:
                    self.telemetry_manager.send_telemetry(
                        trade_result.get('metrics', {}),
                        trade_result['safety_status']
                    )
            else:
                self.logger.info(f"‚ùå Trade rechazado: {trade_result.get('reason', 'Desconocido')}")
                # NO registrar trades rechazados en Google Sheets
            
            self.logger.info(f"‚úÖ Ciclo {self.cycle_count} completado, esperando {self.update_interval}s...")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en ciclo de trading FASE 1.6: {e}")
    
    def start(self):
        """Iniciar bot FASE 1.6 MULTI-PAR"""
        try:
            self.running = True
            self.logger.info("üöÄ Bot profesional - FASE 1.6 MULTI-PAR iniciado correctamente")
            self.logger.info("üîÑ Iniciando bucle principal con optimizaciones...")
            
            # Bucle principal
            while self.running and not shutdown_state["stop"]:
                try:
                    self.run_trading_cycle()
                    
                    # Esperar entre ciclos
                    if not shutdown_state["stop"]:
                        sleep_responsive(self.update_interval)
                    
                except KeyboardInterrupt:
                    self.logger.info("üõë Interrupci√≥n manual recibida")
                    break
                except Exception as e:
                    self.logger.error(f"‚ùå Error en bucle principal: {e}")
                    if not shutdown_state["stop"]:
                        sleep_responsive(60)  # Esperar 1 minuto antes de reintentar
            
        except Exception as e:
            self.logger.error(f"‚ùå Error iniciando bot: {e}")
        finally:
            self.save_state_and_close()
    
    def save_state_and_close(self):
        """Guardar estado y cerrar bot FASE 1.6 MULTI-PAR"""
        try:
            self.logger.info("üíæ Guardando estado...")
            
            # Calcular m√©tricas finales
            metrics = self.metrics_tracker.get_metrics_summary()
            self.logger.info(f"üìä Win Rate calculado: {metrics['win_rate']:.2f}%")
            self.logger.info(f"üìà Profit Factor (neto) calculado: {self.metrics_tracker.get_profit_factor_display()}")
            self.logger.info(f"üìâ Drawdown calculado: {metrics['drawdown']:.2f}%")
            self.logger.info(f"üìä M√©tricas calculadas: WR={metrics['win_rate']:.2f}%, PF={self.metrics_tracker.get_profit_factor_display()}, DD={metrics['drawdown']:.2f}%")
            
            # Enviar resumen final si hay trades
            if self.daily_trades:
                self.send_daily_summary()
            
            # Guardar resumen de sesi√≥n
            session_summary = {
                'session_start': self.session_start_time.isoformat(),
                'session_end': datetime.now().isoformat(),
                'initial_capital': 50.0,
                'final_capital': self.current_capital,
                'total_trades': len(self.metrics_tracker.operations_history),
                'win_rate': metrics['win_rate'],
                'profit_factor': self.metrics_tracker.get_profit_factor_display(),
                'drawdown': metrics['drawdown'],
                'symbols_traded': list(set([t.get('symbol', 'UNKNOWN') for t in self.metrics_tracker.operations_history])),
                'symbol_rotations': self.symbol_rotation_counter
            }
            
            # Guardar en archivo
            import json
            with open('session_summary.json', 'w') as f:
                json.dump(session_summary, f, indent=2)
            
            self.logger.info("‚úÖ Resumen de sesi√≥n guardado en CSV")
            self.logger.info("‚úÖ Estado guardado correctamente")
            
            # Mensaje de cierre
            closing_message = f"""
üõë **BOT PROFESIONAL - FASE 1.6 MULTI-PAR CERRADO**

üìÖ **Sesi√≥n**: {self.session_start_time.strftime('%Y-%m-%d %H:%M')} ‚Üí {datetime.now().strftime('%Y-%m-%d %H:%M')}
üí∞ **Capital**: ${50.0:.2f} ‚Üí ${self.current_capital:.2f}

üìä **Resumen Final**:
üéØ **Trades**: {len(self.metrics_tracker.operations_history)}
üìä **Win Rate**: {metrics['win_rate']:.2f}%
üìà **Profit Factor**: {self.metrics_tracker.get_profit_factor_display()}
üìâ **Drawdown**: {metrics['drawdown']:.2f}%

üîÑ **Multi-Par**:
üìä **S√≠mbolos**: {', '.join(list(set([t.get('symbol', 'UNKNOWN') for t in self.metrics_tracker.operations_history])))}
üîÑ **Rotaciones**: {self.symbol_rotation_counter}

---
ü§ñ **Bot cerrado correctamente**
            """
            self.send_telegram_message(closing_message)
            
            self.logger.info("‚úÖ Bot FASE 1.6 MULTI-PAR cerrado correctamente")
            self.logger.info("‚úÖ Bot terminado correctamente")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error guardando estado: {e}")
    
class TelemetryManager:
    """Sistema de telemetr√≠a y alertas"""
    
    def __init__(self, bot_instance):
        self.logger = logging.getLogger(__name__)
        self.bot = bot_instance
        self.last_telemetry_time = datetime.now()
        self.telemetry_interval = 300  # 5 minutos
        self.rejection_reasons = {
            'low_vol': 0,
            'trend_mismatch': 0,
            'spread_high': 0,
            'safety_block': 0,
            'cooldown': 0
        }
        self.total_signals = 0
        
    def record_rejection(self, reason: str):
        """Registrar motivo de rechazo"""
        try:
            self.total_signals += 1
            if reason in self.rejection_reasons:
                self.rejection_reasons[reason] += 1
            else:
                self.rejection_reasons['other'] = self.rejection_reasons.get('other', 0) + 1
                
        except Exception as e:
            self.logger.error(f"‚ùå Error registrando rechazo: {e}")
    
    def calculate_rejection_percentages(self) -> Dict:
        """Calcular porcentajes de rechazo"""
        try:
            if self.total_signals == 0:
                return {reason: 0.0 for reason in self.rejection_reasons}
            
            percentages = {}
            for reason, count in self.rejection_reasons.items():
                percentages[reason] = (count / self.total_signals) * 100
                
            return percentages
            
        except Exception as e:
            self.logger.error(f"‚ùå Error calculando porcentajes: {e}")
            return {}
    
    def should_send_telemetry(self) -> bool:
        """Verificar si debe enviar telemetr√≠a"""
        return (datetime.now() - self.last_telemetry_time).total_seconds() >= self.telemetry_interval
    
    def should_send_alert(self, metrics: Dict, safety_status: Dict) -> bool:
        """Verificar si debe enviar alerta cr√≠tica"""
        try:
            # Alertas cr√≠ticas
            if metrics.get('drawdown', 0) > 10.0:
                return True
            if metrics.get('profit_factor', 0) < 1.2 and metrics.get('profit_factor', 0) > 0:
                return True
            if metrics.get('win_rate', 0) < 45.0:
                return True
            
            # Calcular fees ratio
            total_pnl = sum(op.get('pnl_net', 0) for op in self.bot.metrics_tracker.operations_history)
            total_fees = sum(op.get('fees', 0) for op in self.bot.metrics_tracker.operations_history)
            
            if total_pnl > 0 and total_fees > 0:
                fees_ratio = (total_fees / total_pnl) * 100
                if fees_ratio > 25.0:
                    return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Error verificando alertas: {e}")
            return False
    
    def send_telemetry(self, metrics: Dict, safety_status: Dict):
        """Enviar telemetr√≠a a Google Sheets"""
        try:
            if not self.should_send_telemetry():
                return
            
            # Calcular m√©tricas adicionales
            trades_per_hour = safety_status.get('hourly_trades', 0)
            rejection_percentages = self.calculate_rejection_percentages()
            
            # Calcular fees ratio
            total_pnl = sum(op.get('pnl_net', 0) for op in self.bot.metrics_tracker.operations_history)
            total_fees = sum(op.get('fees', 0) for op in self.bot.metrics_tracker.operations_history)
            fees_ratio = (total_fees / total_pnl) * 100 if total_pnl > 0 else 0
            
            # Crear datos de telemetr√≠a
            telemetry_data = {
                'timestamp': datetime.now().isoformat(),
                'win_rate': metrics.get('win_rate', 0),
                'profit_factor': self.bot.metrics_tracker.get_profit_factor_display(),
                'drawdown': metrics.get('drawdown', 0),
                'trades_per_hour': trades_per_hour,
                'fees_ratio': fees_ratio,
                'rejection_low_vol': rejection_percentages.get('low_vol', 0),
                'rejection_trend_mismatch': rejection_percentages.get('trend_mismatch', 0),
                'rejection_spread': rejection_percentages.get('spread_high', 0),
                'rejection_safety': rejection_percentages.get('safety_block', 0),
                'rejection_cooldown': rejection_percentages.get('cooldown', 0),
                'total_signals': self.total_signals,
                'probation_mode': safety_status.get('probation_mode', False),
                'racha_cooldown': safety_status.get('racha_cooldown_active', False)
            }
            
            # Enviar a Google Sheets
            self.bot.sheets_logger.log_telemetry(telemetry_data)
            
            # Verificar alertas cr√≠ticas
            if self.should_send_alert(metrics, safety_status):
                self.send_critical_alert(metrics, safety_status, telemetry_data)
            
            self.last_telemetry_time = datetime.now()
            self.logger.info("üìä Telemetr√≠a enviada")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error enviando telemetr√≠a: {e}")
    
    def send_critical_alert(self, metrics: Dict, safety_status: Dict, telemetry_data: Dict):
        """Enviar alerta cr√≠tica a Telegram"""
        try:
            alert_message = f"""
üö® ALERTA CR√çTICA - BOT PROFESIONAL

üìä M√©tricas Cr√≠ticas:
üìâ Drawdown: {metrics.get('drawdown', 0):.2f}%
üìà Profit Factor: {self.bot.metrics_tracker.get_profit_factor_display()}
üìä Win Rate: {metrics.get('win_rate', 0):.2f}%
üí∞ Fees Ratio: {telemetry_data.get('fees_ratio', 0):.2f}%

üõ°Ô∏è Estado Seguridad:
üìä DD: {safety_status.get('intraday_drawdown', 0):.2f}%
üìä DL: {safety_status.get('daily_loss', 0):.2f}%
üìä CL: {safety_status.get('consecutive_losses', 0)}
üîí Probation: {safety_status.get('probation_mode', False)}

‚ö†Ô∏è Requiere atenci√≥n inmediata
"""
            self.bot.send_telegram_message(alert_message)
            self.logger.info("üö® Alerta cr√≠tica enviada")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error enviando alerta cr√≠tica: {e}")

def main():
    """Funci√≥n principal del bot FASE 1.6 MULTI-PAR"""
    try:
        # Configurar argumentos
        parser = argparse.ArgumentParser(description='Trading Bot Profesional FASE 1.6 MULTI-PAR')
        parser.add_argument('--mode', type=str, default='testnet', choices=['testnet', 'production'],
                          help='Modo de operaci√≥n (testnet/production)')
        parser.add_argument('--config', type=str, default='config_fase_1_6.py',
                          help='Archivo de configuraci√≥n')
        
        args = parser.parse_args()
        
        # Configurar logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('trading_bot.log')
            ]
        )
        
        logger = logging.getLogger(__name__)
        
        # Mostrar informaci√≥n de inicio
        logger.info("üöÄ Iniciando Trading Bot - FASE 1.6 MULTI-PAR")
        logger.info(f"üìä Modo: {args.mode}")
        logger.info(f"‚öôÔ∏è Configuraci√≥n: {args.config}")
        logger.info("üéØ Estrategia: breakout")
        
        # Validar configuraci√≥n
        if not config.validate_config():
            logger.error("‚ùå Configuraci√≥n inv√°lida")
            sys.exit(1)
        
        # Mostrar resumen de configuraci√≥n
        summary = config.get_config_summary()
        logger.info("üìä Configuraci√≥n FASE 1.6 MULTI-PAR:")
        logger.info(f"üéØ S√≠mbolos: {', '.join(summary['symbols'])}")
        logger.info(f"üìä TP M√≠nimo: {summary['tp_min_bps']} bps")
        logger.info(f"üìä RR Garantizado: 1.25:1")
        logger.info(f"üõ°Ô∏è DD M√°ximo: {summary['daily_max_drawdown_pct']}%")
        logger.info(f"üìä Trades M√°x/D√≠a: {summary['max_trades_per_day']}")
        
        # Crear y iniciar bot
        bot = ProfessionalTradingBot()
        
        # Configurar se√±ales de apagado
        def signal_handler(signum, frame):
            logger.info("üõë Se√±al de apagado recibida")
            shutdown_state["stop"] = True
            bot.running = False
            
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
            
        # Iniciar bot
        bot.start()
        
    except KeyboardInterrupt:
        logger.info("üõë Interrupci√≥n manual recibida")
    except Exception as e:
        logger.error(f"‚ùå Error en funci√≥n principal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
