#!/usr/bin/env python3
"""
ü§ñ Bot Simplificado para Diagn√≥stico
Versi√≥n m√≠nima para identificar problemas
"""

import os
import sys
import time
import logging
from datetime import datetime

# Configurar logging b√°sico
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_environment():
    """Probar variables de entorno"""
    print("üîç Probando variables de entorno...")
    
    required_vars = [
        'BINANCE_API_KEY',
        'BINANCE_SECRET_KEY',
        'TELEGRAM_BOT_TOKEN',
        'TELEGRAM_CHAT_ID',
        'OPENAI_API_KEY'
    ]
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: Configurado")
        else:
            print(f"‚ùå {var}: FALTANTE")
            return False
    
    return True

def test_imports():
    """Probar imports b√°sicos"""
    print("\nüì¶ Probando imports...")
    
    try:
        import requests
        print("‚úÖ requests: OK")
        
        import schedule
        print("‚úÖ schedule: OK")
        
        import gspread
        print("‚úÖ gspread: OK")
        
        return True
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_config():
    """Probar configuraci√≥n"""
    print("\n‚öôÔ∏è Probando configuraci√≥n...")
    
    try:
        from config_survivor_final import FinalSurvivorTradingConfig
        config = FinalSurvivorTradingConfig()
        print("‚úÖ Configuraci√≥n cargada")
        return True
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def simple_bot_loop():
    """Bucle simple del bot"""
    print("\nü§ñ Iniciando bucle simple del bot...")
    
    counter = 0
    while True:
        try:
            counter += 1
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"[{current_time}] Bot ejecut√°ndose... (iteraci√≥n {counter})")
            
            # Simular trabajo del bot
            time.sleep(30)  # Esperar 30 segundos
            
        except KeyboardInterrupt:
            print("\nüõë Bot detenido por usuario")
            break
        except Exception as e:
            print(f"‚ùå Error en bucle: {e}")
            time.sleep(10)

def main():
    """Funci√≥n principal"""
    print("üß™ BOT SIMPLIFICADO PARA DIAGN√ìSTICO")
    print("=" * 50)
    
    # Probar componentes b√°sicos
    if not test_environment():
        print("‚ùå Variables de entorno faltantes")
        return False
    
    if not test_imports():
        print("‚ùå Imports fallaron")
        return False
    
    if not test_config():
        print("‚ùå Configuraci√≥n fall√≥")
        return False
    
    print("‚úÖ Todas las pruebas pasaron")
    print("üöÄ Iniciando bot simplificado...")
    
    # Iniciar bucle simple
    simple_bot_loop()
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)
